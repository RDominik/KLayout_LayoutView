<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>DensityImage</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>DensityImage</group-name>
 <menu-path>tools_menu.end</menu-path>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>module MyMacro
 
  include RBA


  # Obtain the parameters for the density map 
  # TODO: read them from some setup file or provide a UI for that (difficult) ...
  xmin = 0.00000    # left coordinate of the mapping area
  xmax = 2544.00000      # right coordinate of the mapping area
  ymin = 0         # bottom coordinate of the mapping area
  ymax = 1706.00000    # top coordinate of the mapping area
  xw = 50     # horizontal window size
  yw = 50        # vertical window size
  
  
    $active_layout = RBA::LayoutView::current   
    $mw = RBA::Application.instance.main_window
    $topcell = RBA::CellView::active.layout.top_cell
    $file_path = (RBA::CellView::active.filename).split($mw.current_view.title)[0]

class GridLayout &lt; QGridLayout
    def initialize(parent = nil) super end
    def addItem (arg1) super end
end

class ComboBox &lt; QComboBox
    def initialize(parent = nil) super end
end

class ListWidget &lt; QListWidget
    def initialize(parent = nil) super end

end  
  
    class QTDensity &lt; QDialog
        include RBA
        def initialize(parent = nil)
            super
            @title = ($mw.current_view.title).split(".gds")[0]
            @aLayerName = Array.new
            @aLayer = Array.new
            @aLayerIndex = Array.new
            reload
            setWindowTitle("Density " + @title)

            resize(300, 400)
    
            layout = GridLayout.new(self)
            combogrid = GridLayout.new(self)
            spinboxgrid = GridLayout.new(self)
            
            setLayout(layout)
            
            combo_source = ComboBox.new(self)
            label_combo_dest = QLabel.new(self)
            tree_source = ListWidget.new(self)
            tree_density_layer = ListWidget.new(self)
            spinbox_resolution_x = QDoubleSpinBox.new
            label_res_x = QLabel.new(self)
            spinbox_resolution_y = QDoubleSpinBox.new
            label_res_y = QLabel.new(self)
            
            combo_source.minimumSize = QSize.new(125, 20)
            tree_source.minimumSize = QSize.new(50, 300)
            tree_source.setSelectionMode( QAbstractItemView::ExtendedSelection)
            tree_source.sortItems(Qt::AscendingOrder)
            tree_source.doubleClicked do 
                tree_source.selectedItems.each do |item|
                        tree_density_layer.addItem(item.text)
                        item.destroy
                    end
            end
           # tree_source.sortingEnabled = (true)
            tree_density_layer.minimumSize = QSize.new(50, 300)
            tree_density_layer.setSelectionMode( QAbstractItemView::ExtendedSelection)
            tree_density_layer.sortItems(Qt::AscendingOrder)
             tree_density_layer.doubleClicked do 
                tree_density_layer.selectedItems.each do |item|
                        tree_source.addItem(item.text)
                        item.destroy
                    end
            end
            
          #  tree_density_layer.sortingEnabled = (true)
            label_combo_dest.text = "Geometry Reference Layer"
            spinbox_resolution_x.minimumSize = QSize.new(125, 20)
            spinbox_resolution_x.value = 50
            label_res_x.text = "Density Resolution X"
            spinbox_resolution_y.minimumSize = QSize.new(125, 20)
            spinbox_resolution_y.value = 50
            label_res_y.text = "Density Resolution Y"
            
            layout.addWidget(tree_source, 0, 0, 4, 1)
            layout.addWidget(tree_density_layer, 0, 2, 4, 1)
            
            layout.addLayout(combogrid, 4, 0, 2, 1)
            combogrid.addWidget(label_combo_dest, 0, 0, 1, 1)
            combogrid.addWidget(combo_source, 1,0, 1, 1)
          #  combogrid.addItem(RBA::QSpacerItem::new(30,30,QSizePolicy::Minimum,QSizePolicy::MinimumExpanding))
            
            layout.addLayout(spinboxgrid, 4, 2, 2, 1)
            spinboxgrid.addWidget(label_res_x, 0, 1, 1, 1)
            spinboxgrid.addWidget(spinbox_resolution_x, 1, 1, 1, 1)
            spinboxgrid.addWidget(label_res_y, 2, 1, 1, 1)
            spinboxgrid.addWidget(spinbox_resolution_y, 3, 1, 1, 1)
            
             @aLayer.each do | name|
                combo_source.addItem(name)
            end
            @aLayer.each do | name|
                tree_source.addItem(name)
            end
                        
            b1 = QPushButton.new(self)
            b1.text = "-&gt;"
	    b1.minimumSize = QSize.new(50, 50)
	    b1.clicked do
                    tree_source.selectedItems.each do |item|
                        tree_density_layer.addItem(item.text)
                        item.destroy
                    end
            end
	    layout.addWidget(b1, 1, 1, 1, 1)
	    
            b2 = QPushButton.new(self)
            b2.text = "&lt;-"
	    b2.minimumSize = QSize.new(50, 50)
	    b2.clicked do
                tree_density_layer.selectedItems.each do |item|
                    tree_source.addItem(item.text)
                item.destroy 
                end
            end
	    layout.addWidget(b2, 2, 1, 1, 1)
	    
	    b3 = QPushButton.new(self)
            b3.text = "Start"
	    b3.minimumSize = QSize.new(20, 50)
	    b3.clicked do
	        tree_density_layer.selectAll
                tree_density_layer.selectedItems.each do |item|
                    density_calculation(item.text,combo_source.currentText,spinbox_resolution_x.value,spinbox_resolution_y.value)
                end
            end
	    combogrid.addWidget(b3, 2, 0, 1, 1)
    
        end
        
        def reload
            #Class LayerProperties
            activeLayer = $active_layout.begin_layers
            row = 0
     
            until  activeLayer.at_end? do   
       
                current_name = activeLayer.current.name
            # # remove the source information
                for i in 0..current_name.length      
                    if activeLayer.current.source[0] === current_name[i]
                        break
                    end
                end
                ## remove everything after @           
                for k in 0..activeLayer.current.source.to_s.length    
                    if activeLayer.current.source[k] === "@"
                        break
                    end
                end  
                @aLayerName[row] = current_name[0..(i-1)]
                @aLayer[row] = activeLayer.current.source[0..(k-1)] 
                @aLayerIndex[row] = activeLayer.current.layer_index
                activeLayer.next
                row += 1
            end 
        end
        
        def chip_area(layer_index,dbu)
            cv = $mw.current_view.active_cellview
            for i in 0..@aLayer.length-1      
                if @aLayer[i] == layer_index
                    break
                end
            end
            region = RBA::Region::new($topcell.begin_shapes_rec( @aLayerIndex[i] ))
            @xmin =  region.bbox.p1.x*dbu
            @ymin = region.bbox.p1.y*dbu
            @xmax = region.bbox.p2.x*dbu
            @ymax = region.bbox.p2.y*dbu
            region.destroy
        end
        
        def density_calculation(sel_layer , ref_layer = -1, xw = 50, yw = 50)
             lv = $mw.current_view
            @xmin = 0    # left coordinate of the mapping area
            @xmax = 0      # right coordinate of the mapping area
            @ymin = 0         # bottom coordinate of the mapping area
            @ymax = 0
            @xw = xw     # horizontal window size
            @yw = yw        # vertical window size
             
            if !lv || !lv.active_cellview
                raise "Multiclip: No view or no layout active"
            end
            if !sel_layer || !ref_layer
             raise "Multiclip: No layer selected"
            end
            
            active_sel_layer = $active_layout.begin_layers
            for i in 0..@aLayer.length-1      
                if @aLayer[i] == sel_layer
                    break
                end
                active_sel_layer.next
            end
            
            @layer = RBA::LayerInfo.new(active_sel_layer.current.source_layer, active_sel_layer.current.source_datatype)
            x = 0
            layer = @layer
    
            # obtain the pointers to the layout and cell 
            lay = lv.active_cellview.layout
            top = lv.active_cellview.cell_index
            top_name = lay.cell_name(top)
            top_bbox = lay.cell(top).bbox
            dbu = lay.dbu
            chip_area(ref_layer,dbu)
            # identify the layer to take the density from
            input_layer = nil
            lay.layer_indices.each do |li|
                if lay.get_info(li).is_equivalent?(layer)
                    input_layer = li
                    break
                end
            end

			# no such layer -&gt; error
            if !input_layer
                raise "Multiclip: input layer #{layer.to_s} not found in input layout"
            end

			# Start to collect the data:
            data = []
			# proceed row by row
			# (for each row we use the multi_clip_into which is more efficient than single clips per window)
            nrows = 0
            y = @ymin
            while y &lt; @ymax-1e-6

			# Prepare a new layout to receive the clips
			# Hint: we need to clip all layers (clip does not support clipping of one layer alone currently).
                cl = RBA::Layout.new
                cl.dbu = dbu
                lay.layer_indices.each do |li|
                    cl.insert_layer_at(li, lay.get_info(li))
                end

                # Prepare the clip boxes for this row.
                # Note: because clip only works with boxes that overlap the cell's bounding box currently, we
                # have to operate with a subset of fields to support the general case.
                 boxes = []
                x = @xmin
                ncolumns = 0
                colstart = nil
                while x &lt; @xmax-1e-6
                    b = RBA::Box.new((0.5 + x / dbu).floor, (0.5 + y / dbu).floor, (0.5 + (x + @xw) / dbu).floor, (0.5 + (y + @yw) / dbu).floor);
                    if b.overlaps?(top_bbox)
                        colstart ||= ncolumns 
                        boxes.push(b)
                    end
                    x += @xw
                    ncolumns += 1
                end

                columns = []
                ncolumns.times { columns.push(0.0) }
        
                if colstart

                    col = colstart
					# Actually do the clip
                    cells = lay.multi_clip_into(top, cl, boxes)

                    ep = RBA::ShapeProcessor.new
                    merged = RBA::Shapes.new

                            # Compute the area within area box
                    cells.each do |c|

                            # merge the shapes to polygons and compute the area
                        ep.merge(cl, cl.cell(c), input_layer, merged, true, 0, false, false)
                        a = 0
                        merged.each do |m|
                            a += m.polygon.area
                        end

                            # compute and store the density
                        a = a * dbu * dbu / (@xw *@xw)
                        columns[col] = a

                        col += 1
                    end
                end
                columns.each { |d| data.push(d) }
                y += @yw
                nrows += 1

            end

            if nrows * ncolumns &gt; 0
                data_string = ""
                File.open($file_path + @title + "_" + active_sel_layer.current.source_layer.to_s + "_" + active_sel_layer.current.source_datatype.to_s + "_DensityMap.csv", "a") do |file|
                    qimg = QImage.new(ncolumns,nrows,RBA::QImage_Format::Format_RGB32)
                    for i in 0..nrows-1
                        for k in 0..ncolumns-1
                            value = data[k+i*ncolumns]
                            data_string  += value.to_s + ";"
                            value = (value*255).floor #value*256
                            qimg.setPixel(k,i,((value*65536)+(value*256)+value))
                        end
                        file.puts(data_string)
                        data_string.clear
                    end
                    qimg = qimg.mirrored(false,true)
                    qimg.save($file_path + @title + "_" + active_sel_layer.current.source_layer.to_s + "_" + active_sel_layer.current.source_datatype.to_s + ".bmp")
                end
            end		
        end
    end        

  # $dialog &amp;&amp; $dialog.destroy
  $dialog = QTDensity.new(Application::instance.main_window)
  $dialog.show

end


</text>
</klayout-macro>
