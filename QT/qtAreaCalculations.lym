<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>AreaCalculations</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>AreaCal</group-name>
 <menu-path>tools_menu.end</menu-path>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>module AREAMODULE

  include RBA

  # This class implements a dialog with a screenshot display area and a
  # screenshot button
    $active_layout = RBA::LayoutView::current 
    $mw = RBA::Application.instance.main_window
    $topcell = RBA::CellView::active.layout.top_cell
    $file_path = (RBA::CellView::active.filename) #.split($mw.current_view.title)[0]
    $lv = $mw.current_view
     
    # # derivative class to use virtual methods
    class ProgressBar &lt; QProgressBar
        def initialize(parent = nil)end
        def text 
            return ""
        end
        def sizeHint
            return RBA::QSize.new(100, 10)
        end
    end
    class TabWidget &lt; QTabWidget
        def initialize(parent = nil)end 
    end
    class ComboBox &lt; QComboBox
        def initialize(parent = nil)end 
     end
    class TextEdit &lt; QTextEdit 
        def initialize(parent = nil) end 
    end
    class GridLayout &lt; QGridLayout
        def initialize(parent = nil)end
        def addItem ( arg1) super end 
     end
    class ListWidget &lt; QListWidget 
        def initialize(parent = nil) super end
    end
    
    

class AreaCal &lt; QDialog
    include RBA

    def initialize(parent = nil)
        super
        @title = ($mw.current_view.title).split("gds")[0]

        setWindowTitle("Area Calculations " + @title)
        resize(800, 600)
        setWindowFlags(Qt::Window | Qt::WindowMinimizeButtonHint | Qt::WindowCloseButtonHint);
        setSizeGripEnabled(false)
        setMinimumSize(800, 600)
        setMaximumSize(800, 600)
            
        $layer_density = LayerDensity.new(self)
        $single_via =  SingleVia.new(self)
        layout = GridLayout.new(self)
        single_via_grid = GridLayout.new(self)
        layer_density_grid = GridLayout.new(self)
        layer_area_grid = GridLayout.new(self)
        setLayout(layout)

        single_via_tab = RBA::QDialog::new(self)
        single_via_tab.setLayout(single_via_grid)
        layer_density_tab = RBA::QDialog::new(self)
        layer_density_tab.setLayout(layer_density_grid)
      
        
        @tabWidget = TabWidget.new(self)
        @tabWidget.insertTab(1, layer_density_tab, "Layer Area/Density")
        @tabWidget.insertTab(2, single_via_tab, "SingleVia")
      
        
        layout.addWidget(@tabWidget, 0, 0, 1, 2)
        single_via_grid.addWidget($single_via, 1, 0, 1, 1)
        single_via_grid.addItem(RBA::QSpacerItem::new(150,50,QSizePolicy::MinimumExpanding,QSizePolicy::MinimumExpanding))
        
        layer_density_grid.addWidget($layer_density, 1, 0, 1, 1)
    #    layer_density_grid.addItem(RBA::QSpacerItem::new(150,50,QSizePolicy::MinimumExpanding,QSizePolicy::MinimumExpanding))
        
      end
    end    

###############################################################
###############################################################   
###############################################################
###############################################################    
      class SingleVia &lt; QWidget
        include RBA
        def initialize(parent = nil, f = Qt::Window | Qt::WindowMinimizeButtonHint | Qt::WindowCloseButtonHint )
            super  
        #    setSizeGripEnabled(false)
            @title = ($mw.current_view.title).split("gds")[0]
            resize(400, 100)
            setMinimumSize(300,300)
            setMaximumSize(300, 500)
           
            layout = GridLayout.new(self)
            setLayout(layout)
            @aLayerName = Array.new
            @aLayer = Array.new
            @aLayerIndex = Array.new
             reload
            combo_via = ComboBox.new(self)
            combo_via.minimumSize = QSize.new(100, 20)
            label_combo_via = QLabel.new(self)
            label_combo_via.text = "Via Layer"
            
            combo_metal = ComboBox.new(self)
            combo_metal.minimumSize = QSize.new(100, 20)
            label_combo_metal = QLabel.new(self)
            label_combo_metal.text = "Metal Layer 1"
            
            combo_metal2 = ComboBox.new(self)
            combo_metal2.minimumSize = QSize.new(100, 20)
            label_combo_metal2 = QLabel.new(self)
            label_combo_metal2.text = "Metal Layer 2"
    
            textInput = TextEdit.new(self)
            textInput.minimumSize = QSize.new(100, 180)
            
            @progress = ProgressBar.new(self)
            @progress.setRange(0,100)
            @progress.minimumSize = QSize.new(50, 20)
            @progress.setVisible(true)
            @progress.setTextVisible(false)
            @progress.value = 0
            
            layout.addWidget(label_combo_via, 0, 0, 1, 1)
            layout.addWidget(combo_via, 1, 0, 1, 1)
            layout.addWidget(label_combo_metal, 2, 0, 1, 1)
            layout.addWidget(combo_metal, 3, 0, 1, 1)
            layout.addWidget(label_combo_metal2, 4, 0, 1, 1)
            layout.addWidget(combo_metal2, 5, 0, 1, 1)
        #   layout.addItem(RBA::QSpacerItem::new(20,20,QSizePolicy::Minimum,QSizePolicy::MinimumExpanding))
            layout.addWidget(textInput, 6, 0, 2, 1)
    #        layout.addItem(RBA::QSpacerItem::new(20,20,QSizePolicy::Minimum,QSizePolicy::MinimumExpanding))
         
            b1 = QPushButton.new(self)
            b1.text = "Start"
            b1.minimumSize = QSize.new(50, 50)
            b1.clicked do
                puts time_start = Time.now
                boxes = Array.new
                single_position = Array.new
                values = Array.new
                values = via_dens(combo_via.currentText,combo_metal.currentText,combo_metal2.currentText,boxes,single_position)
                single_via = boxes.length
                calc_time =Time.now - time_start
                report = "Total Via count:"+ values[0].to_s + "\n"+  "Single Via count:" + single_via.to_s + "\n" + "Multiple Via count:" + (values[0]-single_via).to_s + "\n" + "Calculation Time:" + calc_time.to_s 
                region_single = RBA::Region::new(boxes) 
                textInput.setPlainText(report)
              #  helpl = $mw.current_view.active_cellview.layout.layer(RBA::LayerInfo::new(100,0))
               # $topcell.shapes( helpl).insert(region_single) 
                if !$file_path == nil  then raise "No File path" end
                File.open($file_path + @title + "_" + "ViaDensity.csv", "a") do |file|      
                    file.puts( "\n \n" + Time.now.to_s + "\n \n" + report + "\n \n")
                    single_position.each do |point|
                        value = point.x.to_s + ";"+  point.y.to_s
                        file.puts(value)
                    end
                    puts Time.now - time_start
                end
            end   
            layout.addWidget(b1, 8, 0, 1, 1)
            layout.addWidget(@progress, 10, 0, 1, 1)
            combo_via.addItems(@aLayer)
            combo_metal.addItems(@aLayer)
            combo_metal2.addItems(@aLayer)
            
        end 
 ###############################################################
###############################################################         
        def reload
            #Class LayerProperties
            activeLayer = RBA::LayoutView::current.begin_layers
            row = 0
             
            until  activeLayer.at_end? do   
                current_name = activeLayer.current.name
                # # remove the source information
                for i in 0..current_name.length      
                    if activeLayer.current.source[0] === current_name[i]
                        break
                    end
                end
                    # # remove everything after @           
                for k in 0..activeLayer.current.source.to_s.length    
                    if activeLayer.current.source[k] === "@"
                        break
                    end
                end  
                @aLayerName[row] = current_name[0..(i-1)]
                @aLayer[row] = activeLayer.current.source[0..(k-1)] 
                @aLayerIndex[row] = activeLayer.current.layer_index
                activeLayer.next
                row += 1
            end 
        end
        
        def source_to_index(layer_source)
            active_sel_layer = $active_layout.begin_layers
            for i in 0..@aLayer.length-1      
                if @aLayer[i] == layer_source
                    break
                end
                active_sel_layer.next
            end
            active_sel_layer.current.layer_index
        end
###############################################################
###############################################################         
        def via_dens(via_layer, metal_layer,metal_layer2 ,boxes,single_position)
            lv = $mw.current_view
            dbu = $mw.current_view.active_cellview.layout.dbu
            lay = lv.active_cellview.layout
            cl = RBA::Layout.new
            cl.dbu = dbu
            lay.layer_indices.each do |li|
                cl.insert_layer_at(li, lay.get_info(li))
            end
            cl = lay.dup
            if cl.is_editable?
                cl.flatten( $topcell.cell_index, -1,true)
            end
            topcell  = cl.top_cell    
            cv = $mw.current_view.active_cellview
            
            region_via = RBA::Region::new()   
            via_total = 0
          # poly_shapes = Array.new
            iter_vial = (topcell.begin_shapes_rec(source_to_index(via_layer)))
            while !iter_vial.at_end?
                if !iter_vial.shape.is_path? &amp;&amp; !iter_vial.shape.is_text? &amp;&amp; !iter_vial.shape.is_polygon?
                    region_via.insert(iter_vial.shape.polygon)
          #   if iter_vial.shape.is_box?
             #       poly_shapes.push(iter_vial.shape.polygon.dup)
                #    iter_vial.shape.polygon.destroy
              end
               via_total += 1
                iter_vial.next
            end
           iter_vial.destroy
         #   topcell.each_shape(source_to_index(via_layer),RBA::Shapes::SAll) do |item|
         #       if !item.is_path? &amp;&amp; !item.is_text? &amp;&amp; !item.is_polygon?
          #          poly_shapes.push(item.polygon)   
             #       via_total += 1
          #      end
       #     end
         
           # region_via = RBA::Region::new(topcell.begin_shapes_rec(source_to_index(via_layer)))  
            region1 = RBA::Region::new()       
            tp = RBA::TilingProcessor::new
            tp.threads = 4
            tp.input("a1",RBA::Region::new(topcell.begin_shapes_rec(source_to_index(metal_layer))))
            tp.input("a2",RBA::Region::new(topcell.begin_shapes_rec(source_to_index(metal_layer2))))
            tp.output("x1", region1)
            tp.tile_size(50, 50)
            tp.queue("_output(x1, a1 &amp; a2)")
            tp.execute("1")
          #  tp.destroy
            
            region_connect= RBA::Region::new()   
            tp = RBA::TilingProcessor::new
            tp.threads = 4
            tp.input("a1",region_via)
            tp.input("a2",region1)
            tp.output("x1", region_connect)
            tp.tile_size(50, 50)
            tp.queue("_output(x1,a2.select_interacting( a1))")
            tp.execute("2")
     #       tp.destroy
            @progress.value = 5

            region_connect.merge
            #helpl = cv.layout.insert_layer(RBA::LayerInfo::new(400,0))
            #$topcell.shapes( helpl).insert(region_connect)
            @progress.value = 10
            i = 0 
            region_connect.each do
                i += 1
            end
            progress = i/90
            obj = 0
            max_via_shape = 0

            region_connect.each do |polyg| 
                x= 0
                via_inside = 0
                (region_via.interacting(RBA::Region::new(polyg))).each do |via|
                    x +=1
                    via_inside = via
                end
                if x &gt; max_via_shape then max_via_shape = x end
                if x == 1   
                    boxes.push(via_inside) 
                    single_position.push(via_inside.bbox.center*dbu)
                end
                obj += 1
                if !progress
                    @progress.value =10 + obj/progress
                end
            end         
            @progress = 100   
            value = [via_total, max_via_shape]
        end
###############################################################
###############################################################              
        def via_on_metal(via_layer, metal_layer, xw = 50, yw = 50)
            via_data = Array.new 
            metal_data = Array.new
            (nrows,ncolumns) =  density_calculation(via_layer, via_data)
            (nrows,ncolumns) =  density_calculation(metal_layer, metal_data)
            i = 0
            via_data.each do |data|
                if data
                   metal_data[i] =  metal_data[i]/data
                else   
                    metal_data[i] =  data
                end
                i += 1
            end   
             save_values(via_layer, metal_data, nrows, ncolumns)
        end
###############################################################
###############################################################          
    end        
###############################################################
###############################################################  
###############################################################
###############################################################   
    class LayerDensity &lt; QDialog
        include RBA     
        def initialize(parent = nil)
            super
            resize(500, 500)
            @title = ($mw.current_view.title).split("gds")[0]
            layout = GridLayout.new(self)
            combogrid = GridLayout.new(self)
            spinboxgrid = GridLayout.new(self)
            setLayout(layout)
            @aLayerName = Array.new
            @aLayer = Array.new
            @aLayerIndex = Array.new
            reload
            @tree_source = ListWidget.new(self)
            @tree_density_layer = ListWidget.new(self)
            spinbox_resolution_x = QDoubleSpinBox.new
            label_res_x = QLabel.new(self)
            spinbox_resolution_y = QDoubleSpinBox.new
            label_res_y = QLabel.new(self)
            
            combo_ref = ComboBox.new(self)
            label_combo_ref = QLabel.new(self)
            
            @tree_source.minimumSize = QSize.new(50, 250)
            @tree_source.setSelectionMode( QAbstractItemView::ExtendedSelection)
            @tree_source.sortItems(Qt::AscendingOrder)
            @tree_source.doubleClicked do 
                @tree_source.selectedItems.each do |item|
                        @tree_density_layer.addItem(item.text)
                        item.destroy
                    end
            end
           # tree_source.sortingEnabled = (true)
            @tree_density_layer.minimumSize = QSize.new(50, 250)
            @tree_density_layer.setSelectionMode( QAbstractItemView::ExtendedSelection)
            @tree_density_layer.sortItems(Qt::AscendingOrder)
             @tree_density_layer.doubleClicked do 
                @tree_density_layer.selectedItems.each do |item|
                        @tree_source.addItem(item.text)
                        item.destroy
                    end
            end
          #  tree_density_layer.sortingEnabled = (true)
            label_combo_ref.text = "Geometry Reference Layer"
            spinbox_resolution_x.minimumSize = QSize.new(50, 20)
            spinbox_resolution_x.value = 50
            label_res_x.text = "Density Resolution X"
            spinbox_resolution_y.minimumSize = QSize.new(50, 20)
            spinbox_resolution_y.value = 50
            label_res_y.text = "Density Resolution Y"
            
            layout.addWidget(@tree_source, 0, 0, 4, 1)
            layout.addWidget(@tree_density_layer, 0, 2, 4, 1)

            layout.addLayout(combogrid, 5, 0, 2, 1)
            combogrid.addWidget(label_combo_ref, 0, 0, 1, 1)
            combogrid.addWidget(combo_ref, 1,0, 1, 1)
          #  combogrid.addItem(RBA::QSpacerItem::new(30,30,QSizePolicy::Minimum,QSizePolicy::MinimumExpanding))
            
            layout.addLayout(spinboxgrid, 4, 2, 2, 1)
            spinboxgrid.addWidget(label_res_x, 0, 1, 1, 1)
            spinboxgrid.addWidget(spinbox_resolution_x, 1, 1, 1, 1)
            spinboxgrid.addWidget(label_res_y, 2, 1, 1, 1)
            spinboxgrid.addWidget(spinbox_resolution_y, 3, 1, 1, 1)
            
            @tree_source.addItems(@aLayer)
            combo_ref.addItems(@aLayer)
                        
            b1 = QPushButton.new(self)
            b1.text = "-&gt;"
	    b1.minimumSize = QSize.new(50, 50)
	    b1.clicked do
                    @tree_source.selectedItems.each do |item|
                        @tree_density_layer.addItem(item.text)
                        item.destroy
                    end
            end
	    layout.addWidget(b1, 1, 1, 1, 1)
	    
            b2 = QPushButton.new(self)
            b2.text = "&lt;-"
	    b2.minimumSize = QSize.new(50, 50)
	    b2.clicked do
                @tree_density_layer.selectedItems.each do |item|
                    @tree_source.addItem(item.text)
                item.destroy 
                end
            end
	    layout.addWidget(b2, 2, 1, 1, 1)
	    
	    b3 = QPushButton.new(self)
            b3.text = "Calculate\nLayer Density"
	    b3.minimumSize = QSize.new(20, 50)
	    b3.clicked do
	        @tree_density_layer.selectAll
                @tree_density_layer.selectedItems.each do |item|
                    density_calculation(item.text,spinbox_resolution_x.value,spinbox_resolution_y.value)
                end
            end
	    combogrid.addWidget(b3, 2, 0, 1, 1)
	    
            b4 = QPushButton.new(self)
	    b4.text = "Calculate\nLayer Area"
	    b4.minimumSize = QSize.new(20, 50)
	    b4.clicked do
	        output = Array.new
	        @tree_density_layer.selectAll
                File.open($file_path + @title +  "_Area.csv", "a") do |file|
                    file.puts("Area in % ; Area in mu^2 ; Layer ; " + (Time.now).to_s)
                    @tree_density_layer.selectedItems.each do |item|
                        file.puts(area_calculation(item.text,combo_ref.currentText))
                    end
                end
	    end
	    combogrid.addWidget(b4, 3, 0, 1, 1)   
	    b5 = QPushButton.new(self)
	    b5.text = "Refresh\nLayer List"
	    b5.minimumSize = QSize.new(20, 50)
	    b5.clicked do
	        reload_trees
	    end
	    combogrid.addWidget(b5, 4, 0, 1, 1)
        end
###############################################################
###############################################################       
        def reload
            #Class LayerProperties
            activeLayer = RBA::LayoutView::current.begin_layers
            row = 0
             
            until  activeLayer.at_end? do   
                current_name = activeLayer.current.name
                # # remove the source information
                for i in 0..current_name.length      
                    if activeLayer.current.source[0] === current_name[i]
                        break
                    end
                end
                    # # remove everything after @           
                for k in 0..activeLayer.current.source.to_s.length    
                    if activeLayer.current.source[k] === "@"
                        break
                    end
                end  
                @aLayerName[row] = current_name[0..(i-1)]
                @aLayer[row] = activeLayer.current.source[0..(k-1)] 
                @aLayerIndex[row] = activeLayer.current.layer_index
                activeLayer.next
                row += 1
            end 
        end
    
        def source_to_index(layer_source)
            active_sel_layer = $active_layout.begin_layers
            for i in 0..@aLayer.length-1      
                if @aLayer[i] == layer_source
                    break
                end
                active_sel_layer.next
            end
            active_sel_layer.current.layer_index
        end
###############################################################
###############################################################     
        def chip_area(sel_layer,dbu)
            cv = $mw.current_view.active_cellview
            a = 0
            region = RBA::Region::new($topcell.begin_shapes_rec(source_to_index(sel_layer)))
            region.merge
            @xmin =  region.bbox.p1.x*dbu
            @ymin = region.bbox.p1.y*dbu
            @xmax = region.bbox.p2.x*dbu
            @ymax = region.bbox.p2.y*dbu
            @xw = 50     # horizontal window size
            @yw = 50        # vertical window size
            a =  region.bbox.area
            a*dbu*dbu 
        end
###############################################################
###############################################################    
        def reload_trees
            reload
            @tree_density_layer.clear
            @tree_source.clear
            @tree_source.addItems(@@aLayer)  
        end
###############################################################
###############################################################           
        def density_calculation(sel_layer, xw = 50, yw = 50)
            chip = $topcell.bbox
            dbu = $lv.active_cellview.layout.dbu
            @xmin =  chip.p1.x*dbu
            @ymin = chip.p1.y*dbu
            @xmax = chip.p2.x*dbu
            @ymax = chip.p2.y*dbu
            @xw = xw     # horizontal window size
            @yw = yw        # vertical window size
           
            data = []
            
            values = layer_calc(sel_layer, data)
            save_density_map(sel_layer, values[0],values[1],data)  
        end
###############################################################
###############################################################          
        def area_calculation(sel_layer, ref_layer)
            dbu = $lv.active_cellview.layout.dbu
            chip = chip_area(sel_layer,dbu)
            values = layer_calc(sel_layer)
            a = values[2]
            
            active_sel_layer = $active_layout.begin_layers
            for i in 0..@aLayer.length-1      
                if @aLayer[i] == sel_layer
                    break
                end
                active_sel_layer.next
            end
            output = sprintf("%.2f ; ",(a )/chip*100)
            output += sprintf("%.2f ; ", a)
            output += ((active_sel_layer.current.source(true).split("@")[0])).to_s + " ; "
        end
###############################################################
###############################################################      
        def layer_calc(sel_layer, data = []) 
            if !$lv || !$lv.active_cellview
                raise "Multiclip: No view or no layout active"
            end
            if !sel_layer 
             raise "Multiclip: No layer selected"
            end
            x = 0
            data_area = 0
            # obtain the pointers to the layout and cell 
            lay = $lv.active_cellview.layout
            top = $lv.active_cellview.cell_index
            top_name = lay.cell_name(top)
            top_bbox = lay.cell(top).bbox
            dbu = lay.dbu
            
            # identify the layer to take the density from
            input_layer = source_to_index(sel_layer)
            # no such layer -&gt; error
            if !input_layer
                raise "Multiclip: input layer #{layer.to_s} not found in input layout"
            end
			# Start to collect the data:
			# proceed row by row
			# (for each row we use the multi_clip_into which is more efficient than single clips per window)
            nrows = 0
            y = @ymin
            while y &lt; @ymax-1e-6

			# Prepare a new layout to receive the clips
			# Hint: we need to clip all layers (clip does not support clipping of one layer alone currently).
                cl = RBA::Layout.new
                cl.dbu = dbu
                lay.layer_indices.each do |li|
                    cl.insert_layer_at(li, lay.get_info(li))
                end

                # Prepare the clip boxes for this row.
                # Note: because clip only works with boxes that overlap the cell's bounding box currently, we
                # have to operate with a subset of fields to support the general case.
                 boxes = []
                x = @xmin
                ncolumns = 0
                colstart = nil
                while x &lt; @xmax-1e-6
                    b = RBA::Box.new((0.5 + x / dbu).floor, (0.5 + y / dbu).floor, (0.5 + (x + @xw) / dbu).floor, (0.5 + (y + @yw) / dbu).floor);
                    if b.overlaps?(top_bbox)
                        colstart ||= ncolumns 
                        boxes.push(b)
                    end
                    x += @xw
                    ncolumns += 1
                end
                columns = []
                ncolumns.times { columns.push(0.0)}

                if colstart
                    col = colstart
    			# Actually do the clip
                    cells = lay.multi_clip_into(top, cl, boxes)
                    ep = RBA::ShapeProcessor.new
                    merged = RBA::Shapes.new
                            # Compute the area within area box
                    cells.each do |c|
                            # merge the shapes to polygons and compute the area
                        ep.merge(cl, cl.cell(c), input_layer, merged, true, 0, false, false)
                        a = 0
                        merged.each do |m|
                            a += m.polygon.area
                        end
                            # compute and store the density
                        data_area += a * dbu * dbu
                        a = a * dbu * dbu / (@xw *@xw)
                        columns[col] = a
                        col += 1
                    end
                end
                columns.each { |d| data.push(d) }
                y += @yw
                nrows += 1
            end
            values = [nrows,ncolumns,data_area]
        end
###############################################################
###############################################################          
        def save_density_map(sel_layer, nrows, ncolumns,data = [])    
            active_sel_layer = $active_layout.begin_layers
            for i in 0..@aLayer.length-1      
                if @aLayer[i] == sel_layer
                    break
                end
                active_sel_layer.next
            end
            if nrows * ncolumns &gt; 0
                data_string = ""
                File.open($file_path + @title + "_" + active_sel_layer.current.source_layer.to_s + "_" + active_sel_layer.current.source_datatype.to_s + "_DensityMap.csv", "a") do |file|
                    qimg = QImage.new(ncolumns,nrows,RBA::QImage_Format::Format_RGB32)
                    for i in 0..nrows-1
                        for k in 0..ncolumns-1
                            value = data[k+i*ncolumns]
                            data_string  += value.to_s + ";"
                            value = (value*255).floor #value*256
                            qimg.setPixel(k,i,((value*65536)+(value*256)+value))
                        end
                        file.puts(data_string)
                        data_string.clear
                    end
                    qimg = qimg.mirrored(false,true)
                    qimg.save($file_path + @title + "_" + active_sel_layer.current.source_layer.to_s + "_" + active_sel_layer.current.source_datatype.to_s + ".bmp")
                end
            end		
        end
###############################################################
###############################################################    
    end
###############################################################
###############################################################  
###############################################################
###############################################################   

  # Instantiate the dialog and make it visible initially.
  # Passing the $main_window will make it stay on top of the main window.
#  $dialog &amp;&amp; $dialog.destroy
    
    $dialog = AreaCal.new(Application::instance.main_window)
   
    $dialog.show

end
</text>
</klayout-macro>
