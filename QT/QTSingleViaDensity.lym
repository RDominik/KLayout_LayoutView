<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>SingleViaDensity</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>DensityImage</group-name>
 <menu-path>tools_menu.end</menu-path>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>module SingleViaModule
 
include RBA
  
    $active_layout = RBA::LayoutView::current 
    $mw = RBA::Application.instance.main_window
    $topcell = RBA::CellView::active.layout.top_cell
    $file_path = (RBA::CellView::active.filename) #.split($mw.current_view.title)[0]
    
    class TabWidget &lt; QTabWidget
        def initialize(parent = nil) end
    end
    
    class ComboBox &lt; QComboBox
        def initialize(parent = nil)end
    end
    
    class GridLayout &lt; QGridLayout
        def initialize(parent = nil)end
        def addItem ( arg1) super end
    end
    class ProgressBar &lt; QProgressBar
        def initialize(parent = nil)end
        def text 
            return " "
        end
        def sizeHint
            return RBA::QSize.new(100, 10)
        end
    end
    
    # # derivative class to use virtual methods
class TextEdit &lt; QTextEdit
	def initialize(parent = nil) end
end

    
    class SingleVia &lt; QDialog
        include RBA
        def initialize(parent = nil)
            super
            @title = ($mw.current_view.title).split("gds")[0]
            @aLayerName = Array.new
            @aLayer = Array.new
            @aLayerIndex = Array.new
            
            setWindowTitle("ViaDensity " + @title)
            setSizeGripEnabled(false)
            resize(400, 100)
           setMinimumSize(300,300)
            setMaximumSize(300, 300)
            setWindowFlags(Qt::Window | Qt::WindowMinimizeButtonHint | Qt::WindowCloseButtonHint)
            
            layout = GridLayout.new(self)
            setLayout(layout)
            
            combo_via = ComboBox.new(self)
            combo_via.minimumSize = QSize.new(100, 20)
            label_combo_via = QLabel.new(self)
            label_combo_via.text = "Via Layer"
            
            combo_metal = ComboBox.new(self)
            combo_metal.minimumSize = QSize.new(100, 20)
            label_combo_metal = QLabel.new(self)
            label_combo_metal.text = "Metal Layer 1"
            
            combo_metal2 = ComboBox.new(self)
            combo_metal2.minimumSize = QSize.new(100, 20)
            label_combo_metal2 = QLabel.new(self)
            label_combo_metal2.text = "Metal Layer 2"
    
            textInput = TextEdit.new(self)
            textInput.minimumSize = QSize.new(100, 80)
            
            @progress = ProgressBar.new(self)
            @progress.setRange(0,100)
            @progress.minimumSize = QSize.new(50, 20)
            @progress.setVisible(true)
            @progress.setTextVisible(false)
            @progress.value = 0
            
            layout.addWidget(label_combo_via, 0, 0, 1, 1)
            layout.addWidget(combo_via, 1, 0, 1, 1)
            layout.addWidget(label_combo_metal, 2, 0, 1, 1)
            layout.addWidget(combo_metal, 3, 0, 1, 1)
            layout.addWidget(label_combo_metal2, 4, 0, 1, 1)
            layout.addWidget(combo_metal2, 5, 0, 1, 1)
            layout.addItem(RBA::QSpacerItem::new(20,20,QSizePolicy::Minimum,QSizePolicy::MinimumExpanding))
            layout.addWidget(textInput, 6, 0, 2, 1)
            layout.addItem(RBA::QSpacerItem::new(20,20,QSizePolicy::Minimum,QSizePolicy::MinimumExpanding))
         
            
            b1 = QPushButton.new(self)
            b1.text = "Start"
            b1.minimumSize = QSize.new(50, 50)
            b1.clicked do
                puts time_start = Time.now
                boxes = Array.new
                single_position = Array.new
                values = Array.new
                values = via_dens(combo_via.currentText,combo_metal.currentText,combo_metal2.currentText,boxes,single_position)
                single_via = boxes.length
                calc_time =Time.now - time_start
                report = "Total Via count:"+ values[0].to_s + "\n"+  "Single Via count:" + single_via.to_s + "\n" + "Multiple Via count:" + (values[0]-single_via).to_s + "\n" + "Calculation Time:" + calc_time.to_s 
                region_single = RBA::Region::new(boxes) 
                textInput.setPlainText(report)
                helpl = $mw.current_view.active_cellview.layout.layer(RBA::LayerInfo::new(100,0))
                $topcell.shapes( helpl).insert(region_single) 
                if !$file_path == nil  then raise "No File path" end
                    File.open($file_path + @title + "_" + "ViaDensity.csv", "a") do |file|      
                        file.puts( "\n \n" + Time.now.to_s + "\n \n" + report + "\n \n")
                        single_position.each do |point|
                            value = point.x.to_s + ";"+  point.y.to_s
                            file.puts(value)
                        end
                    end   
                 puts Time.now - time_start     
            end
            layout.addWidget(b1, 8, 0, 1, 1)
            layout.addWidget(@progress, 10, 0, 1, 1)
           
            reload
            @aLayer.each do | name|
                combo_via.addItem(name)
            end
            @aLayer.each do | name|
                combo_metal.addItem(name)
            end
            @aLayer.each do | name|
                combo_metal2.addItem(name)
            end
        end        
###############################################################
###############################################################         
        def reload
            #Class LayerProperties
            activeLayer = $active_layout.begin_layers
            row = 0
         
            until  activeLayer.at_end? do   
           
                current_name = activeLayer.current.name
                # # remove the source information
                for i in 0..current_name.length      
                    if activeLayer.current.source[0] === current_name[i]
                        break
                    end
                end
                # # remove everything after @           
                for k in 0..activeLayer.current.source.to_s.length    
                    if activeLayer.current.source[k] === "@"
                        break
                    end
                end  
                @aLayerName[row] = current_name[0..(i-1)]
                @aLayer[row] = activeLayer.current.source[0..(k-1)] 
                @aLayerIndex[row] = activeLayer.current.layer_index
                activeLayer.next
                row += 1
            end 
        end
###############################################################
###############################################################          
        def source_to_index(layer_source)
            active_sel_layer = $active_layout.begin_layers
            for i in 0..@aLayer.length-1      
                if @aLayer[i] == layer_source
                    break
                end
                active_sel_layer.next
            end
            active_sel_layer.current.layer_index
        end
###############################################################
###############################################################    
        def chip_area(dbu)
            chip = $topcell.bbox
            @xmin =  chip.p1.x*dbu
            @ymin = chip.p1.y*dbu
            @xmax = chip.p2.x*dbu
            @ymax = chip.p2.y*dbu
        end
###############################################################
###############################################################              
        def via_dens(via_layer, metal_layer,metal_layer2 ,boxes,single_position)
            lv = $mw.current_view
            dbu = $mw.current_view.active_cellview.layout.dbu
            lay = lv.active_cellview.layout
            cl = RBA::Layout.new
            cl_cell = cl.create_cell("TOP")
            cl.dbu = dbu
            lay.layer_indices.each do |li|
                cl.insert_layer_at(li, lay.get_info(li))
            end
            cl = lay.dup
            cl.flatten( $topcell.cell_index, -1,true)
            topcell  =  cl.top_cell    
            cv = $mw.current_view.active_cellview
            iter_vial = (topcell.begin_shapes_rec(source_to_index(via_layer)))
            region_via = RBA::Region::new()   
            via_total = 0
            while !iter_vial.at_end?
               if !iter_vial.shape.is_path? &amp;&amp; !iter_vial.shape.is_text? &amp;&amp; !iter_vial.shape.is_polygon?
                   region_via.insert(iter_vial.shape.polygon)
               end
                via_total += 1
                iter_vial.next
            end

            region1 = RBA::Region::new()       
            tp = RBA::TilingProcessor::new
            tp.threads = 4
            tp.input("a1",RBA::Region::new(topcell.begin_shapes_rec(source_to_index(metal_layer))))
            tp.input("a2",RBA::Region::new(topcell.begin_shapes_rec(source_to_index(metal_layer2))))
            tp.output("x1", region1)
            tp.tile_size(50, 50)
            tp.queue("_output(x1, a1 &amp; a2)")
            tp.execute("1")
            tp.destroy
            cl.destroy
            region_connect= RBA::Region::new()   
            tp = RBA::TilingProcessor::new
            tp.threads = 4
            tp.input("a1",region_via)
            tp.input("a2",region1)
            tp.output("x1", region_connect)
            tp.tile_size(50, 50)
            tp.queue("_output(x1,a2.select_interacting( a1))")
            tp.execute("2")
            tp.destroy
            @progress.value = 5
            
        #    region_connect = RBA::Region::new()  
       #     tp = RBA::TilingProcessor::new
       #     tp.threads = 4
          #  tp.input("b1",region2)
          #  tp.output("y1", region_connect)
           # tp.tile_size(500,500)
           # tp.queue("_output(y1, b1.merge)")
           # tp.execute("3")
           # tp.destroy
           # region_connect.merged_semantics = true
            region_connect.merge
          #  helpl = cv.layout.insert_layer(RBA::LayerInfo::new(400,0))
       #     $topcell.shapes( helpl).insert(region_connect)
            @progress.value = 10
            i = 0 
            region_connect.each do
                i += 1
            end
            progress = i/90
            obj = 0
            max_via_shape = 0

            region_connect.each do |polyg| 
                x= 0
                via_inside = 0
     
                (region_via.interacting(RBA::Region::new(polyg))).each do |via|
                    x +=1
                    via_inside = via
                end
                if x &gt; max_via_shape then max_via_shape = x end
                if x == 1   
                    boxes.push(via_inside) 
                    single_position.push(via_inside.bbox.center*dbu)
                end
                obj += 1
                @progress.value =10 + obj/progress
            end            
            value = [via_total, max_via_shape]
        end
###############################################################
###############################################################              
        def via_on_metal(via_layer, metal_layer, xw = 50, yw = 50)
            via_data = Array.new 
            metal_data = Array.new
            (nrows,ncolumns) =  density_calculation(via_layer, via_data)
            (nrows,ncolumns) =  density_calculation(metal_layer, metal_data)
            i = 0
            via_data.each do |data|
                if data
                   metal_data[i] =  metal_data[i]/data
                else   
                    metal_data[i] =  data
                end
                i += 1
            end   
             save_values(via_layer, metal_data, nrows, ncolumns)
        end
###############################################################
###############################################################                   
    end
#    $dialog &amp;&amp; $dialog.destroy
    $dialog = SingleVia.new(Application::instance.main_window)
    $dialog.show

end</text>
</klayout-macro>
