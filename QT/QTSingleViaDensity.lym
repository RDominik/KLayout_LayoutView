<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>SingleViaDensity</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>DensityImage</group-name>
 <menu-path>tools_menu.end</menu-path>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text>module SingleViaModule
 
include RBA
  
    
    class TabWidget &lt; QTabWidget
        def initialize(parent = nil) end
    end
    
    class ComboBox &lt; QComboBox
        def initialize(parent = nil)end
    end
    
    class GridLayout &lt; QGridLayout
        def initialize(parent = nil)end
        def addItem ( arg1) super end
    end
    class ProgressBar &lt; QProgressBar
        def initialize(parent = nil)end
        def text 
            return " "
        end
        def sizeHint
            return RBA::QSize.new(100, 10)
        end
    end
    
    # # derivative class to use virtual methods
class TextEdit &lt; QTextEdit
	def initialize(parent = nil) end
end

    
    class SingleVia &lt; QDialog
        include RBA
        def initialize(parent = nil)
            super
			@active_layout = RBA::LayoutView::current 
			@mw = RBA::Application.instance.main_window
			@topcell = RBA::CellView::active.layout.top_cell
			@file_path = (RBA::CellView::active.filename) #.split(@mw.current_view.title)[0]
    
            @title = (@mw.current_view.title).split("gds")[0]
            @aLayerName = Array.new
            @aLayer = Array.new
            @aLayerIndex = Array.new
            
            setWindowTitle("ViaDensity " + @title)
            setSizeGripEnabled(false)
            resize(400, 100)
           setMinimumSize(400,400)
            setMaximumSize(400, 400)
            setWindowFlags(Qt::Window | Qt::WindowMinimizeButtonHint | Qt::WindowCloseButtonHint)
            
            layout = GridLayout.new(self)
            setLayout(layout)
            
            combo_via = ComboBox.new(self)
            combo_via.minimumSize = QSize.new(100, 20)
            label_combo_via = QLabel.new(self)
            label_combo_via.text = "Via Layer"
            
            combo_metal = ComboBox.new(self)
            combo_metal.minimumSize = QSize.new(100, 20)
            label_combo_metal = QLabel.new(self)
            label_combo_metal.text = "Metal Layer 1"
            
            combo_metal2 = ComboBox.new(self)
            combo_metal2.minimumSize = QSize.new(100, 20)
            label_combo_metal2 = QLabel.new(self)
            label_combo_metal2.text = "Metal Layer 2"
    
            @textInput = TextEdit.new(self)
            @textInput.minimumSize = QSize.new(100, 80)
            
            @progress = ProgressBar.new(self)
            @progress.setRange(0,100)
            @progress.minimumSize = QSize.new(50, 20)
            @progress.setVisible(true)
            @progress.setTextVisible(false)
            @progress.value = 0
            
            layout.addWidget(label_combo_via, 0, 0, 1, 1)
            layout.addWidget(combo_via, 1, 0, 1, 1)
            layout.addWidget(label_combo_metal, 2, 0, 1, 1)
            layout.addWidget(combo_metal, 3, 0, 1, 1)
            layout.addWidget(label_combo_metal2, 4, 0, 1, 1)
            layout.addWidget(combo_metal2, 5, 0, 1, 1)
          #  layout.addItem(RBA::QSpacerItem::new(20,20,QSizePolicy::Minimum,QSizePolicy::MinimumExpanding))
            layout.addWidget(@textInput, 6, 0, 2, 1)
          # layout.addItem(RBA::QSpacerItem::new(20,20,QSizePolicy::Minimum,QSizePolicy::MinimumExpanding))
         
            
            b1 = QPushButton.new(self)
            b1.text = "Calculate SingleVia"
            b1.minimumSize = QSize.new(50, 50)
            b1.clicked do
                time_start = Time.now
                @singlevia_polygon = Array.new
                @singlevia_coordinates = Array.new
                values = Array.new
                values = singlevia_calculation(combo_via.currentText,combo_metal.currentText,combo_metal2.currentText,@singlevia_polygon,@singlevia_coordinates)
                data_to_file(@singlevia_polygon,@singlevia_coordinates, values,Time.now - time_start )  
            end
            layout.addWidget(b1, 8, 0, 1, 1)
             
           
            b2 = QPushButton.new(self)
            b2.text = "Calculate SingleVia\n(and Big Metal Plate connections)"
            b2.minimumSize = QSize.new(50, 50)
            b2.clicked do
                puts time_start = Time.now
                boxes = Array.new
                single_position = Array.new
                values = Array.new
                values = via_dens(combo_via.currentText,combo_metal.currentText,combo_metal2.currentText,boxes,single_position)
                #data_to_file(boxes, values)
               # puts Time.now - time_start
           end
           layout.addWidget(b2, 10, 0, 1, 1)
           layout.addWidget(@progress, 12, 0, 1, 1)
            reload
            @aLayer.each do | name|
                combo_via.addItem(name)
            end
            @aLayer.each do | name|
                combo_metal.addItem(name)
            end
            @aLayer.each do | name|
                combo_metal2.addItem(name)
            end
        end           
###############################################################
###############################################################            
        def data_to_file(singlevia_polygon, singlevia_coordinates, values, calc_time)
            singlevia_count = singlevia_polygon.length
            report = "Total Via count:"+ values[0].to_s + "\n"+  "Single Via count:" + singlevia_count.to_s + "\n" + "Multiple Via count:" + (values[0]-singlevia_count).to_s + "\n" + "Calculation Time:" + calc_time.to_s 
            @textInput.setPlainText(report)
            if !@file_path == nil  then raise "No File path" end
            File.open(@file_path + @title + "_" + "ViaDensity.csv", "a") do |file|      
                file.puts( "\n \n" + Time.now.to_s + "\n \n" + report + "\n \n")
                singlevia_coordinates.each do |point|
                value = point.x.to_s + ";"+  point.y.to_s
                    file.puts(value)
                end
            end   
        end
###############################################################
###############################################################         
        def reload
            #Class LayerProperties
            activeLayer = @active_layout.begin_layers
            row = 0
         
            until  activeLayer.at_end? do   
           
                current_name = activeLayer.current.name
                # # remove the source information
                for i in 0..current_name.length      
                    if activeLayer.current.source[0] === current_name[i]
                        break
                    end
                end
                # # remove everything after @           
                for k in 0..activeLayer.current.source.to_s.length    
                    if activeLayer.current.source[k] === "@"
                        break
                    end
                end  
                @aLayerName[row] = current_name[0..(i-1)]
                @aLayer[row] = activeLayer.current.source[0..(k-1)] 
                @aLayerIndex[row] = activeLayer.current.layer_index
                activeLayer.next
                row += 1
            end 
        end
###############################################################
###############################################################          
        def source_to_index(layer_source)
            active_sel_layer = @active_layout.begin_layers
            for i in 0..@aLayer.length-1      
                if @aLayer[i] == layer_source
                    break
                end
                active_sel_layer.next
            end
            active_sel_layer.current.layer_index
        end
###############################################################
###############################################################    
        def chip_area(dbu)
            chip = @topcell.bbox
            @xmin =  chip.p1.x*dbu
            @ymin = chip.p1.y*dbu
            @xmax = chip.p2.x*dbu
            @ymax = chip.p2.y*dbu
        end
###############################################################
###############################################################              
        def singlevia_calculation(via_layer, metal_layer,metal_layer2 ,singlevia_polygon,singlevia_coordinates)
            lv = @mw.current_view
            dbu = @mw.current_view.active_cellview.layout.dbu
            lay = lv.active_cellview.layout
            #cl = RBA::Layout.new
            #cl_cell = cl.create_cell("TOP")
            #cl.dbu = dbu
            #lay.layer_indices.each do |li|
                #cl.insert_layer_at(li, lay.get_info(li))
            #end
            #cl = lay.dup
            #lay.flatten( @topcell.cell_index, -1,true)
            lay.flatten( @topcell.cell_index, -1,true)
            topcell  =  @topcell   
            cv = @mw.current_view.active_cellview

            
            metal_overlap = RBA::Region::new()       
            tp = RBA::TilingProcessor::new
            tp.threads = 4
            tp.input("a1",RBA::Region::new(topcell.begin_shapes_rec(source_to_index(metal_layer))))
            tp.input("a2",RBA::Region::new(topcell.begin_shapes_rec(source_to_index(metal_layer2))))
            tp.output("x1", metal_overlap)
            tp.tile_size(50, 50)
            tp.queue("_output(x1, a1 &amp; a2)")
            tp.execute("1")
            tp.destroy
            metal_overlap.merge

            
            iter_vial = (topcell.begin_shapes_rec(source_to_index(via_layer)))
            via_region = RBA::Region::new()   
            via_total = 0
            while !iter_vial.at_end?
               if !iter_vial.shape.is_path? &amp;&amp; !iter_vial.shape.is_text? &amp;&amp; !iter_vial.shape.is_polygon?
                   via_region.insert(iter_vial.shape.polygon)
               end
                via_total += 1
                iter_vial.next
            end
            
            metal_overlap.merge
            metal_merged_over_via = (metal_overlap.select_interacting(via_region)).dup
            metal_overlap._destroy
            via_region._destroy

           shape_interconnect = 0
            
            metal_merged_over_via.each do
                shape_interconnect += 1
            end
            time_start = 0
            puts time_start = Time.now
            single_via_region = RBA::Region::new()
            max_via_shape = 0
            shape_counter = 0 
           
            @progress.value = 0
            metal_merged_over_via.each do |polygon|
            
                 via_over_metal = RBA::Region::new(topcell.begin_shapes_rec_overlapping(source_to_index(via_layer), polygon.bbox))
                 count_via = 0
                 
                 via_over_metal.each do
                    count_via += 1
                 end
                 if count_via == 1
                    @textInput.repaint
                    via_over_metal.each do |polygon|
                        singlevia_polygon.push(polygon)
                        singlevia_coordinates.push(polygon.bbox.center)
                    end     
                elsif  count_via &gt;  max_via_shape
                    max_via_shape = count_via       
                end                 
                shape_counter += 1
                @progress.value = (shape_counter*100)/shape_interconnect
                via_over_metal._destroy
                
                estimated_time = "\n estimated remaining time " + ((((Time.now-time_start) /shape_counter)*(shape_interconnect-shape_counter)).round(2)).to_s + " in seconds"
                @textInput.setPlainText("Calculate Gate " + shape_counter.to_s + " out of " +  shape_interconnect.to_s + estimated_time)
            end      
            single_via_region = RBA::Region::new(singlevia_polygon)    
            helpl = cv.layout.insert_layer(RBA::LayerInfo::new(400,0))
            @topcell.shapes( helpl).insert(single_via_region)  

            metal_merged_over_via._destroy
            single_via_region._destroy
            value = [via_total, max_via_shape]
        end
###############################################################
###############################################################              
        def via_on_metal(via_layer, metal_layer, xw = 50, yw = 50)
            via_data = Array.new 
            metal_data = Array.new
            (nrows,ncolumns) =  density_calculation(via_layer, via_data)
            (nrows,ncolumns) =  density_calculation(metal_layer, metal_data)
            i = 0
            via_data.each do |data|
                if data
                   metal_data[i] =  metal_data[i]/data
                else   
                    metal_data[i] =  data
                end
                i += 1
            end   
             save_values(via_layer, metal_data, nrows, ncolumns)
        end
###############################################################
###############################################################                   
    end
#    $dialog &amp;&amp; $dialog.destroy
    $dialog = SingleVia.new(Application::instance.main_window)
    $dialog.show

end</text>
</klayout-macro>
